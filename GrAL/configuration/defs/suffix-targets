# -*- makefile -*-

##############################################
#
# This file contains common some targets used 
# in package makefiles.
#
##############################################

# some aliases for standard targets
distclean: realclean
clobber:   realclean



###########################
##      Checks           ##
###########################

# Module Makefiles contain lines like
# test: standard-test (if there is something to test)
# test:               (else)

# build test programs

standard-test:
	(cd test; $(MAKE) $(TARGET))

# execute test programs
standard-check: module-check
	(cd test; $(MAKE) check DEPS='')

standard-check-force: module-check
	(cd test; $(MAKE) check-force DEPS='')

# hook for modules extra checks
module-check:

# make test & check in one pass, and clean up
# Useful for many modules & limited disk space.
standard-test-check-clean:
	(cd test; $(MAKE) new-check-clean)

standard-test-check-clean-force:
	(cd test; $(MAKE) new-check-clean-force)

# users can define VG_SUPPRESSIONS to suppress errors, e.g. in third party libs
CHECKER=$(HOME)/bin/valgrind -v --tool=memcheck --leak-check=yes $(VG_SUPPRESSIONS)
FILTER=cat

run-check:
	@(out=$(EXEC).out; \
          echo='echo -e'; \
         rm -f *.out; \
         if ! ./$(EXEC)  > $$out 2>&1 ; \
         then \
           $$echo "ERROR running $(EXEC) "; \
           echo "Output was:"; \
           cat $$out; \
           $$echo " End output "; \
         else \
           $(CHECKER) ./$(EXEC) > $$out.valgrind 2>&1 ; \
             if  grep "ERROR SUMMARY: [1-9]" $$out.valgrind > /dev/null ; \
             then \
                echo "Valgrind ERROR in $(EXEC):" ; \
                cat $$out.valgrind; \
             fi ;\
             if  grep "definitely lost: [1-9]" $$out.valgrind > /dev/null ; \
             then \
               echo "Valgrind memory leak error detected in $(EXEC):" ; \
               grep "definitely lost: [1-9]" $$out.valgrind ; \
             fi ;\
           $$echo "\n"; \
           for i in  *.out; \
           do \
             $(FILTER) $$i > $$i.filtered.out; \
             if diff $$i.filtered.out $$i.exp; \
             then  $$echo "\t\t\t" $$i OK; \
             else  $$echo "\t\t\t" ERROR in $$i; \
             fi ;\
           done ;\
           $$echo "\n"; \
         fi)

#####################################################################
# This is the central place of specifying which files to clean
# As every C++ compiler leaves different stuff behind when dealing
# with templates, it seems wise to concentrate this information.
#####################################################################

stdclean: moduleclean
	@rm -f $(EXEC)
	@rm -f *~ *.flc *.o  *.d *.ti *.ii core core.* out *.out
	@rm -f *.valgrind
	@find . -name "*~" -exec rm {} \; -print
	@rm -rf ti_files # KCC template DB
	@rm -rf *.tmp
	@rm -f doxy.log 

texclean:
	find . -name "*~" -o -name "*.dvi" -o -name "*.aux" \
         -o -name "*.log" -exec rm {} \;

clean: stdclean texclean

libclean:
	rm -rf lib/$(LIBPATH)/*.a

realclean: clean

############################
##  Installation targets ###
############################

install-libs:
	mkdir -p $(PREFIX)/lib/$(LIBPATH)
	cp $(ROOT)/lib/$(LIBPATH)/lib*  $(PREFIX)/lib/$(LIBPATH)  || echo "No libs found."

std-install-headers:
	(cd include;\
         mkdir -p $(INSTALLHEADERS); \
         cp -R . $(INSTALLHEADERS);)
	@(find $(INSTALLHEADERS) -name CVS -exec /bin/rm -rf {} \; \
           > /dev/null 2>&1 || echo '')

install: install-headers 



########################################################
#
# Targets to generate documentation using doxygen.   
#
# Documentation generation (doc:) is broken down into
# predoc: and postdoc: phases.
# predoc: does generate the documentation, and
# postdoc: does perform some replacement of paths and
# links.
# By default, only doxygen documentation is generated.
# Packages can add more by adding dependencies to
#  additional-predoc: and additional-postdoc: targets.
#########################################################


predoc:  doxy additional-predoc
postdoc: installdox additional-postdoc
doc: predoc postdoc
copydoc: copy-doxy additional-copydoc


# hooks for module-specific additional docs
additional-predoc:
additional-postdoc:
additional-copydoc:
additional-doc: additional-predoc additional-postdoc

# doxygen specific targets

DOXYGEN=$(shell which doxygen)
DOCROOT=$(GRALROOT)
DOXYPATH=doxygen/html
DOXYCFG=$(CONFIGURATION)/doxycfg/
DOXYHEADER=$(DOXYCFG)/header.html
DOXYFOOTER=$(DOXYCFG)/footer.html
DOXYCSS=$(DOXYCFG)/gral.css
RELPATH=../../..#
ADDRELPATH=.#
RELROOT=$(RELPATH)/$(ADDRELPATH)#


CONCEPTPATH=gral/base/doc/hyperlatex/html#
GRALCONCEPTS=$(RELROOT)/$(CONCEPTPATH)#

# hooks to define in modules if necessary (e.g. recursive doxy)
additional-doxy:
additional-installdox:

doxy: local-doxy additional-doxy

local-doxy:
	$(DOXYCFG)/filter-doxy-cfg.pl  -root $(GRALROOT) -binpath $(LOCALBINPATH) \
        $(DOXYCFG)/doxy.paths.cfg                 >  doxy.cfg.tmp
	echo "@INCLUDE_PATH = $(DOXYCFG)"         >> doxy.cfg.tmp
	cat doxy.local.cfg                        >> doxy.cfg.tmp
	echo "STRIP_FROM_PATH = $(ROOT)/include/ $(ROOT)/"   >> doxy.cfg.tmp
	cat dependencies*                            > doxy.deps.tmp || echo 'no dependencies found'
	$(DOXYCFG)/generate-doxycfg.pl -root $(GRALROOT) doxy.deps.tmp   >> doxy.cfg.tmp
	cp $(DOXYHEADER) .
	cp $(DOXYFOOTER) .
	cp $(DOXYCSS)    .
	mkdir -p doxygen
	(TEXINPUTS=$(TEXINPUTS):$(ROOT):$(DOXYCFG):$(CONFIGURATION)/tex; export TEXINPUTS; \
         $(DOXYGEN) doxy.cfg.tmp;)
	rm -f `basename $(DOXYHEADER)` `basename $(DOXYFOOTER)` `basename $(DOXYCSS)`
	rm -f doxy.cfg.tmp 

installdox: local-installdox additional-installdox

local-installdox:
	cat dependencies*                            > doxy.deps.tmp || echo 'no dependencies found'
	$(DOXYCFG)/generate-installdox.pl \
          -root $(RELROOT) \
          -path $(DOXYPATH)\
           doxy.deps.tmp  > installdox.sh.tmp;
	chmod ugo+x ./installdox.sh.tmp;
	./installdox.sh.tmp
	rm -f installdox.sh.tmp doxy.deps.tmp
	$(DOXYCFG)/install-doc.pl\
            -root $(RELROOT) \
            -path $(DOXYPATH) \
            -stl $(STLURL) \
            -gralconcepts $(GRALCONCEPTS) \
          $(DOXYPATH)/*.html

DOCDEST=/dev/null
copy-doxy: 
	mkdir -p $(DOCDEST)/$(DOXYPATH)
	cp -r $(DOXYPATH)/* $(DOCDEST)/$(DOXYPATH)


###########################
##  Standard suffix rule ##
###########################

.PHONY: doc test demo

.SUFFIXES: .C .cc .d .f

.C.o: 
	$(CC) $(CCFLAGS) $(IFLAGS) -c $<

.cc.o: 
	$(CC) $(CCFLAGS) $(IFLAGS) -c $<

.C.d:
	$(DEPEND) $(DEPFLAGS) $(IFLAGS) $<  > $@
