# -*- makefile -*-

##################################
# Included by all mk.config files
# in the module directories
##################################

# guarantee that all is the first target, such that a plain make does the Right Thing.
first: all

# configuration parameters
# may be overrun in mk.config files

#/*! \file  make Variables:
#  - ARCH: define architecture, possible values: solaris, linux 
#  - CCNAME:  compiler name, used in paths, possible values: kai, gcc
# */

ifndef CONFIGURATION
export CONFIGURATION=$(GRALROOT)/configuration
endif

include $(CONFIGURATION)/defs/local.defs

ifndef ARCH
export ARCH   =linux#  
endif

#//! compiler name, used in paths, possible values: kai, gcc
ifndef CCNAME
export CCNAME =gcc4.1#      
endif

ifndef DEBUG
export DEBUG  =debug#    # opt, debug
endif

ifndef DEVELOP
export DEVELOP=develop# # develop, user
endif

# here some utility scripts can be found,
# typically for collective operations on all modules
export SCRIPTS=$(CONFIGURATION)/scripts
export STLURL=http://www.sgi.com/tech/stl


ifndef LOCALBINPATH
export LOCALBINPATH=/opt/local/bin#
endif

# targets for tree makefiles (directory makefiles calling subdir makefiles) 
export RECURSIVETARGETS=$(CONFIGURATION)/defs/recursive-targets

# Path for installation 
ifndef PREFIX
export PREFIX=$(HOME)/lib/gral#
endif

# Modules required by current module
# A module depends on 
# a) the modules listed in 'dependencies'
# b) the dependencies of those modules
#
# To get b), we loop through the dependencies of the modules listed in dependencies file
# In theory, we should continue recursively until no new dependencies are added
# In practice, one hop should do ... can always add another one.

# first level dependencies from a)
DEPMODULES_0_ = $(shell  cat  $(ROOT)/dependencies 2>/dev/null) $(EXTRA_DEPMODULES)
DEPMODULES_0  = $(sort $(DEPMODULES_0_)) # make DEPMODULES_0_ unique
DEPMODULES_0_PATHS = $(addsuffix /dependencies,$(addprefix $(GRALROOT)/,$(DEPMODULES_0)))

# second level dependencies from b)
DEPMODULES_1_ = $(DEPMODULES_0) $(shell $(CONFIGURATION)/scripts/cat-with-space.sh  $(DEPMODULES_0_PATHS) 2>/dev/null)
DEPMODULES_1  = $(sort $(DEPMODULES_1_))

# could add third level here

export DEPMODULES = $(DEPMODULES_1)


# exporting PDW could give trouble in subdir Makefiles
# which try to give default values to other variables such as CONFIG
# in order to enable direct make invocation in the subdirectory
unexport PWD

# rules .C.o, .C.d, some standard targets
ifndef GRAL_DONT_INCLUDE_TARGETS
include $(CONFIGURATION)/defs/suffix-targets
endif

# installation
export INSTALLHEADERS=$(PREFIX)/include#
export INSTALLLIBRARIES=$(PREFIX)/lib#


# Relative paths for finding specific make definitions
# or for specifying places to put library  version
# built with different parameters
export DEFPATH:=$(ARCH)/$(CCNAME)/$(DEBUG)#
export LIBPATH:=$(DEFPATH)#

# some args may need to be at the beginning of the LDFLAGS
LDFLAGS = $(LDFLAGS_BEGIN)

# The includes and libs of the current module
ifdef ROOT
ifeq ($(DEVELOP),develop)
export INCDIR   =$(ROOT)/include#
export LIBDIR   =$(ROOT)/lib/$(LIBPATH)#
IFLAGS  += -I$(INCDIR)
LDFLAGS += -L$(LIBDIR)
endif
endif


IFLAGS += -I$(BOOST)

export CC      = $(CCC)

# location of architecture dep. def's,  defines AR
export ARCHDIR    :=$(CONFIGURATION)/defs/$(ARCH)#    
include $(ARCHDIR)/make.defs

# location of compiler dep. def's.
# defines CCC, CCFLAGS, DEPEND, maybe AR
export COMPILERDIR:=$(CONFIGURATION)/defs/$(CCNAME)/$(DEBUG)# 
include $(COMPILERDIR)/make.defs


# compiler & architecture dependent definitions
# TODO: test if this exists.
# momentarily not used
export DEFDIR     :=$(CONFIGURATION)/defs/$(DEFPATH)#  
#include $(DEFDIR)/make.defs

CCFLAGS += $(EXTRA_CCFLAGS)
LDFLAGS += $(EXTRA_LDFLAGS)
IFLAGS  += $(EXTRA_IFLAGS)

# if developing code, use include and libraries
# of other (`peer') modules directly (because of frequent 
# mutual change requirements)
ifeq ($(DEVELOP),develop)
IFLAGS  += $(addsuffix /include,$(addprefix -I$(GRALROOT)/,$(DEPMODULES)))
LDFLAGS += $(addsuffix /lib/$(LIBPATH),$(addprefix -L$(GRALROOT)/,$(DEPMODULES)))
else # use installed versions
IFLAGS  += -I$(PREFIX)/include
LDFLAGS += -L$(PREFIX)/lib/$(LIBPATH)
endif


# some flags need to be at the end of LDFLAGS
LDFLAGS +=  $(LDFLAGS_END)


ifdef PROFILING
include $(CONFIGURATION)/defs/$(CCNAME)/profiling.defs
endif

# for use in other make contexts
GRAL_CCFLAGS=$(CCFLAGS) $(IFLAGS)
GRAL_LDFLAGS=$(LDFLAGS)


.PHONY: test
